use super::Результат;
use диагностика::*;

// СДЕЛАТЬ: Реформировать термины используемые в типах
// - цел - знаковое целое число, Си аналог: int
// - нат - натуральное, беззнаковое цело число, Си аналог: unsigned int
// - вещ - вещественное, число с плавающей точкой формата IEEE 754, Си аналог: float, double, etc
// - лог - логический булевый тип, Си аналог: bool

#[derive(PartialEq, Debug, Clone)]
pub enum Тип {
    Цел8,
    Цел64,
    Вещ32,
    Строка,
    Лог,
    Массив { размер: usize, тип_элемента: Box<Тип> },
    Срез { тип_элемента: Box<Тип> },
}

impl Тип {
    pub fn примитивный(&self) -> bool {
        match self {
            Тип::Цел8 | Тип::Цел64 | Тип::Вещ32 | Тип::Лог => true,
            Тип::Строка | Тип::Массив {..} | Тип::Срез {..} => false,
        }
    }

    pub fn текст(&self) -> String {
        match self {
            Тип::Цел8 => "цел8".to_string(),
            Тип::Цел64 => "цел64".to_string(),
            Тип::Вещ32 => "вещ32".to_string(),
            Тип::Строка => "строка".to_string(),
            Тип::Лог => "лог".to_string(),
            Тип::Массив {тип_элемента, размер} => format!("массив({размер}, {тип_элемента})", тип_элемента = тип_элемента.текст()),
            Тип::Срез {тип_элемента} => format!("срез({тип_элемента})", тип_элемента = тип_элемента.текст()),
        }
    }

    pub fn размер(&self) -> usize{
        match self {
            Тип::Цел8 => 1,
            Тип::Цел64 => 8,
            Тип::Вещ32 => 4,
            Тип::Строка => 16, // Два 64-х битных числа: указатель на начало и размер.
            Тип::Лог => 8,
            Тип::Массив {тип_элемента, размер} => тип_элемента.размер() * размер,
            Тип::Срез {..} => 16, // Два 64-х битных числа: указатель на начало и размер.
        }
    }
}

pub fn проверить_типы(лок: &Лок, ожидаемый_тип: &Тип, действительный_тип: &Тип) -> Результат<()> {
    if ожидаемый_тип == действительный_тип {
        Ok(())
    } else {
        диагностика!(лок, "ОШИБКА", "Несоответствие типов данных. Ожидался тип «{ожидаемый}», но повстречался тип «{действительный}»",
                     ожидаемый = ожидаемый_тип.текст(),
                     действительный = действительный_тип.текст());
        Err(())
    }
}
