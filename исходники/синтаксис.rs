use std::num::{IntErrorKind};
use лексика::*;
use диагностика::*;
use super::Результат;

#[derive(Clone)]
pub enum ВыражениеПримТипа {
    ЦелРазмерное { имя: Лексема, размер: Выражение },
    Цел { имя: Лексема },
    Лог { имя: Лексема },
    Строка { имя: Лексема },
}

impl ВыражениеПримТипа {
    fn разобрать(лекс: &mut Лексер) -> Результат<ВыражениеПримТипа> {
        let имя = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
        match имя.текст.as_str() {
            "цел" => {
                if лекс.подсмотреть_лексему()?.вид == ВидЛексемы::ОткрытаяСкобка {
                    let _ = лекс.вытащить_лексему().unwrap();
                    let размер = Выражение::разобрать(лекс)?;
                    let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ЗакрытаяСкобка])?;
                    Ok(ВыражениеПримТипа::ЦелРазмерное {имя, размер})
                } else {
                    Ok(ВыражениеПримТипа::Цел {имя})
                }
            }
            "строка" => Ok(ВыражениеПримТипа::Строка {имя}),
            "лог" => Ok(ВыражениеПримТипа::Лог {имя}),
            _ => {
                диагностика!(&имя.лок, "ОШИБКА", "неизвестный тип «{имя}»", имя = &имя.текст);
                Err(())
            }
        }
    }
}

#[derive(Clone)]
pub enum ВыражениеТипа {
    ПримТип(ВыражениеПримТипа),
    Массив {
        имя: Лексема,
        размер: Выражение,
        прим_тип: ВыражениеПримТипа,
    }
}

impl ВыражениеТипа {
    pub fn разобрать(лекс: &mut Лексер) -> Результат<ВыражениеТипа> {
        let лексема = лекс.подсмотреть_лексему()?;
        if лексема.вид == ВидЛексемы::Идент && лексема.текст == "массив" {
            let _ = лекс.вытащить_лексему().unwrap();
            let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ОткрытаяСкобка])?;
            let размер = Выражение::разобрать(лекс)?;
            let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ЗакрытаяСкобка])?;
            let прим_тип = ВыражениеПримТипа::разобрать(лекс)?;
            Ok(ВыражениеТипа::Массив{имя: лексема, прим_тип, размер})
        } else {
            Ok(ВыражениеТипа::ПримТип(ВыражениеПримТипа::разобрать(лекс)?))
        }
    }
}

#[derive(Clone)]
pub struct Переменная {
    pub имя: Лексема,
    pub тип: ВыражениеТипа,
}

impl Переменная {
    pub fn разобрать(лекс: &mut Лексер) -> Результат<Переменная> {
        let имя = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
        let тип = ВыражениеТипа::разобрать(лекс)?;
        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ТочкаЗапятая])?;
        Ok(Переменная{имя, тип})
    }
}

#[derive(Debug, Clone)]
pub enum ВидБинопа {
    Меньше,
    Сложение
}

impl ВидБинопа {
    fn по_виду_лексемы(вид: &ВидЛексемы) -> Option<ВидБинопа> {
        match вид {
            ВидЛексемы::КлючМн => Some(ВидБинопа::Меньше),
            ВидЛексемы::Плюс => Some(ВидБинопа::Сложение),
            _ => None
        }
    }
}

#[derive(Debug, Clone)]
pub enum Выражение {
    Число(Лексема, usize),
    Строка(Лексема),
    Идент(Лексема),
    Биноп {
        ключ: Лексема,
        вид: ВидБинопа,
        левое: Box<Выражение>,
        правое: Box<Выражение>,
    }
}

impl Выражение {
    pub fn лок(&self) -> &Лок {
        match self {
            Выражение::Число(лексема, _) |
            Выражение::Строка(лексема)   |
            Выражение::Идент(лексема) => &лексема.лок,
            Выражение::Биноп{ключ, ..} => &ключ.лок,
        }
    }

    fn разобрать_первичное(лекс: &mut Лексер) -> Результат<Выражение> {
        let лексема = лекс.вытащить_лексему_вида(&[
            ВидЛексемы::Число,
            ВидЛексемы::Идент,
            ВидЛексемы::Строка
        ])?;
        match лексема.вид {
            ВидЛексемы::Число => {
                match лексема.текст.parse() {
                    Ok(число) => Ok(Выражение::Число(лексема, число)),
                    Err(ошибка) => match ошибка.kind() {
                        IntErrorKind::PosOverflow => {
                            диагностика!(&лексема.лок, "ОШИБКА", "Число слишком большое");
                            Err(())
                        }
                        IntErrorKind::Empty => unreachable!(),
                        IntErrorKind::InvalidDigit => unreachable!(),
                        IntErrorKind::NegOverflow => unreachable!(),
                        IntErrorKind::Zero => unreachable!(),
                        _ => {
                            диагностика!(&лексема.лок, "ОШИБКА", "Число некорректно");
                            Err(())
                        }
                    }
                }
            }
            ВидЛексемы::Идент => Ok(Выражение::Идент(лексема)),
            ВидЛексемы::Строка => Ok(Выражение::Строка(лексема)),
            _ => unreachable!(),
        }
    }

    fn разобрать_биноп(лекс: &mut Лексер) -> Результат<Выражение> {
        let левое = Выражение::разобрать_первичное(лекс)?;
        if let Some(вид) = ВидБинопа::по_виду_лексемы(&лекс.подсмотреть_лексему()?.вид) {
            let ключ = лекс.вытащить_лексему().unwrap();
            let правое = Выражение::разобрать_биноп(лекс)?;
            Ok(Выражение::Биноп {
                вид,
                ключ,
                левое: Box::new(левое),
                правое: Box::new(правое),
            })
        } else {
            Ok(левое)
        }
    }

    fn разобрать(лекс: &mut Лексер) -> Результат<Выражение> {
        Выражение::разобрать_биноп(лекс)
    }
}

#[derive(Debug)]
pub enum Утверждение {
    Присваивание{ключ: Лексема, имя: Лексема, значение: Выражение},
    Вызов{имя: Лексема, аргументы: Vec<Выражение>},
    Пока{ключ: Лексема, условие: Выражение, тело: Vec<Утверждение>},
}

pub struct Параметр {
    pub имя: Лексема,
    pub тип: ВыражениеТипа,
}

pub struct Процедура {
    pub имя: Лексема,
    pub параметры: Vec<Параметр>,
    pub тело: Vec<Утверждение>,
}

fn разобрать_блок_кода(лекс: &mut Лексер) -> Результат<Vec<Утверждение>> {
    let mut блок = Vec::new();
    let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::КлючНч])?;
    loop {
        let лексема = лекс.вытащить_лексему_вида(&[
            ВидЛексемы::Идент,
            ВидЛексемы::КлючПока,
            ВидЛексемы::КлючКц,
        ])?;
        match лексема.вид {
            ВидЛексемы::Идент => {
                let имя = лексема;
                let лексема = лекс.вытащить_лексему_вида(&[
                    ВидЛексемы::Присваивание,
                    ВидЛексемы::ОткрытаяСкобка
                ])?;
                match лексема.вид {
                    ВидЛексемы::Присваивание => {
                        let ключ = лексема;
                        let значение = Выражение::разобрать(лекс)?;
                        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ТочкаЗапятая])?;
                        блок.push(Утверждение::Присваивание {ключ, имя, значение});
                    }
                    ВидЛексемы::ОткрытаяСкобка => {
                        let mut аргументы = Vec::new();

                        // СДЕЛАТЬ: ввести идиому лекс.вытащить_лексему_если()
                        if лекс.подсмотреть_лексему()?.вид == ВидЛексемы::ЗакрытаяСкобка {
                            let _ = лекс.вытащить_лексему()?;
                        } else {
                            'разбор_аргументов: loop {
                                аргументы.push(Выражение::разобрать(лекс)?);
                                let лексема = лекс.вытащить_лексему_вида(&[
                                    ВидЛексемы::ЗакрытаяСкобка,
                                    ВидЛексемы::Запятая
                                ])?;
                                if лексема.вид == ВидЛексемы::ЗакрытаяСкобка {
                                    break 'разбор_аргументов
                                }
                            }
                        }
                        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ТочкаЗапятая])?;
                        блок.push(Утверждение::Вызов {имя, аргументы})
                    }
                    _ => unreachable!()
                }
            }
            ВидЛексемы::КлючПока => {
                let ключ = лексема;
                let условие = Выражение::разобрать(лекс)?;
                let тело = разобрать_блок_кода(лекс)?;
                блок.push(Утверждение::Пока{ключ, условие, тело});
            }
            ВидЛексемы::КлючКц => break,
            _ => unreachable!(),
        }
    }
    Ok(блок)
}

fn разобрать_список_параметров_процедуры(лекс: &mut Лексер) -> Результат<Vec<Параметр>> {
    let mut параметры = Vec::new();
    let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ОткрытаяСкобка])?;
    if лекс.подсмотреть_лексему()?.вид == ВидЛексемы::ЗакрытаяСкобка {
        let _ = лекс.вытащить_лексему()?;
    } else {
        'разбор_параметров: loop {
            let имя = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
            let тип = ВыражениеТипа::разобрать(лекс)?;
            параметры.push(Параметр {имя, тип});
            let лексема = лекс.вытащить_лексему_вида(&[
                ВидЛексемы::ЗакрытаяСкобка,
                ВидЛексемы::Запятая
            ])?;
            if лексема.вид == ВидЛексемы::ЗакрытаяСкобка {
                break 'разбор_параметров
            }
        }
    }
    Ok(параметры)
}

impl Процедура {
    pub fn разобрать(лекс: &mut Лексер) -> Результат<Процедура> {
        let имя = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
        let параметры = разобрать_список_параметров_процедуры(лекс)?;
        let тело = разобрать_блок_кода(лекс)?;
        Ok(Процедура{имя, параметры, тело})
    }
}

#[derive(Debug)]
pub struct Константа {
    pub имя: Лексема,
    pub выражение: Выражение,
}

impl Константа {
    pub fn разобрать(лекс: &mut Лексер) -> Результат<Константа> {
        let имя = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::Равно])?;
        let выражение = Выражение::разобрать(лекс)?;
        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ТочкаЗапятая])?;
        Ok(Константа{имя, выражение})
    }
}
