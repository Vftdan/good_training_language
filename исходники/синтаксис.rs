use std::num::{IntErrorKind};
use std::collections::HashMap;
use лексика::*;
use super::Результат;

#[derive(Debug)]
pub enum Тип {
    Цел,
    Строка,
    Лог,
}

impl Тип {
    pub fn размер(&self) -> usize {
        match self {
            Тип::Цел => 8,
            Тип::Строка => 16, // Два 64-х битных числа: указатель на начало и размер.
            Тип::Лог => 8,
        }
    }

    fn разобрать(лекс: &mut Лексер) -> Результат<Тип> {
        let имя_типа = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
        match имя_типа.текст.as_str() {
            "цел" => Ok(Тип::Цел),
            "строка" => Ok(Тип::Строка),
            "лог" => Ok(Тип::Лог),
            _ => {
                диагностика!(&имя_типа.лок, "ОШИБКА",
                             "неизвестный тип «{имя_типа}»",
                             имя_типа = &имя_типа.текст);
                Err(())
            }
        }
    }
}

#[derive(Debug)]
pub struct Переменная {
    pub имя: Лексема,
    pub тип: Тип,
}

impl Переменная {
    fn разобрать(лекс: &mut Лексер) -> Результат<Переменная> {
        let имя = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
        let тип = Тип::разобрать(лекс)?;
        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ТочкаЗапятая])?;
        Ok(Переменная{имя, тип})
    }
}

#[derive(Debug)]
pub enum ВидБинопа {
    Меньше,
    Сложение
}

impl ВидБинопа {
    fn по_виду_лексемы(вид: &ВидЛексемы) -> Option<ВидБинопа> {
        match вид {
            ВидЛексемы::КлючМн => Some(ВидБинопа::Меньше),
            ВидЛексемы::Плюс => Some(ВидБинопа::Сложение),
            _ => None
        }
    }
}

#[derive(Debug)]
pub enum Выражение {
    Число(usize),
    Строка(Лексема),
    Идент(Лексема),
    Биноп {
        ключ: Лексема,
        вид: ВидБинопа,
        левое: Box<Выражение>,
        правое: Box<Выражение>,
    }
}

impl Выражение {
    fn разобрать_первичное(лекс: &mut Лексер) -> Результат<Выражение> {
        let лексема = лекс.вытащить_лексему_вида(&[
            ВидЛексемы::Число,
            ВидЛексемы::Идент,
            ВидЛексемы::Строка
        ])?;
        match лексема.вид {
            ВидЛексемы::Число => {
                match лексема.текст.parse() {
                    Ok(число) => Ok(Выражение::Число(число)),
                    Err(ошибка) => match ошибка.kind() {
                        IntErrorKind::PosOverflow => {
                            диагностика!(&лексема.лок, "ОШИБКА", "Число слишком большое");
                            Err(())
                        }
                        IntErrorKind::Empty => unreachable!(),
                        IntErrorKind::InvalidDigit => unreachable!(),
                        IntErrorKind::NegOverflow => unreachable!(),
                        IntErrorKind::Zero => unreachable!(),
                        _ => {
                            диагностика!(&лексема.лок, "ОШИБКА", "Число некорректно");
                            Err(())
                        }
                    }
                }
            }
            ВидЛексемы::Идент => Ok(Выражение::Идент(лексема)),
            ВидЛексемы::Строка => Ok(Выражение::Строка(лексема)),
            _ => unreachable!(),
        }
    }

    fn разобрать_биноп(лекс: &mut Лексер) -> Результат<Выражение> {
        let левое = Выражение::разобрать_первичное(лекс)?;
        if let Some(вид) = ВидБинопа::по_виду_лексемы(&лекс.подсмотреть_лексему()?.вид) {
            let ключ = лекс.вытащить_лексему().unwrap();
            let правое = Выражение::разобрать_биноп(лекс)?;
            Ok(Выражение::Биноп {
                вид,
                ключ,
                левое: Box::new(левое),
                правое: Box::new(правое),
            })
        } else {
            Ok(левое)
        }
    }

    fn разобрать(лекс: &mut Лексер) -> Результат<Выражение> {
        Выражение::разобрать_биноп(лекс)
    }
}

#[derive(Debug)]
pub enum Утверждение {
    Присваивание{имя: Лексема, значение: Выражение},
    Вызов{имя: Лексема, аргументы: Vec<Выражение>},
    Пока{условие: Выражение, тело: Vec<Утверждение>},
}

#[derive(Debug)]
pub struct Процедура {
    pub имя: Лексема,
    pub тело: Vec<Утверждение>
}

fn разобрать_блок_кода(лекс: &mut Лексер) -> Результат<Vec<Утверждение>> {
    let mut блок = Vec::new();
    let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::КлючНч])?;
    loop {
        let лексема = лекс.вытащить_лексему_вида(&[
            ВидЛексемы::Идент,
            ВидЛексемы::КлючПока,
            ВидЛексемы::КлючКц,
        ])?;
        match лексема.вид {
            ВидЛексемы::Идент => {
                let имя = лексема;
                let лексема = лекс.вытащить_лексему_вида(&[
                    ВидЛексемы::Присваивание,
                    ВидЛексемы::ОткрытаяСкобка
                ])?;
                match лексема.вид {
                    ВидЛексемы::Присваивание => {
                        let значение = Выражение::разобрать(лекс)?;
                        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ТочкаЗапятая])?;
                        блок.push(Утверждение::Присваивание {
                            имя,
                            значение
                        });
                    }
                    ВидЛексемы::ОткрытаяСкобка => {
                        let mut аргументы = Vec::new();

                        // СДЕЛАТЬ: ввести идиому лекс.вытащить_лексему_если()
                        if лекс.подсмотреть_лексему()?.вид == ВидЛексемы::ЗакрытаяСкобка {
                            let _ = лекс.вытащить_лексему()?;
                        } else {
                            'разбор_аргументов: loop {
                                аргументы.push(Выражение::разобрать(лекс)?);
                                let лексема = лекс.вытащить_лексему_вида(&[
                                    ВидЛексемы::ЗакрытаяСкобка,
                                    ВидЛексемы::Запятая
                                ])?;
                                if лексема.вид == ВидЛексемы::ЗакрытаяСкобка {
                                    break 'разбор_аргументов
                                }
                            }
                        }
                        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ТочкаЗапятая])?;
                        блок.push(Утверждение::Вызов {имя, аргументы})
                    }
                    _ => unreachable!()
                }
            }
            ВидЛексемы::КлючПока => {
                let условие = Выражение::разобрать(лекс)?;
                let тело = разобрать_блок_кода(лекс)?;
                блок.push(Утверждение::Пока{условие, тело});
            }
            ВидЛексемы::КлючКц => break,
            _ => unreachable!(),
        }
    }
    Ok(блок)
}

impl Процедура {
    fn разобрать(лекс: &mut Лексер) -> Результат<Процедура> {
        let имя = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ОткрытаяСкобка])?;
        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ЗакрытаяСкобка])?;
        let тело = разобрать_блок_кода(лекс)?;
        Ok(Процедура{имя, тело})
    }
}

pub struct Константа {
    pub имя: Лексема,
    pub выражение: Выражение,
}

impl Константа {
    fn разобрать(лекс: &mut Лексер) -> Результат<Константа> {
        let имя = лекс.вытащить_лексему_вида(&[ВидЛексемы::Идент])?;
        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::Равно])?;
        let выражение = Выражение::разобрать(лекс)?;
        let _ = лекс.вытащить_лексему_вида(&[ВидЛексемы::ТочкаЗапятая])?;
        Ok(Константа{имя, выражение})
    }
}

#[derive(Default)]
pub struct Модуль {
    pub переменные: HashMap<String, Переменная>,
    pub процедуры: HashMap<String, Процедура>,
    pub константы: HashMap<String, Константа>,
}

impl Модуль {
    fn верифицировать_переопределение_имени(&self, имя: &Лексема) -> Результат<()> {
        if let Some(существующая_переменная) = self.переменные.get(&имя.текст) {
            диагностика!(&имя.лок, "ОШИБКА",
                         "уже существует переменная с именем «{имя}»",
                         имя = имя.текст);
            диагностика!(&существующая_переменная.имя.лок, "ИНФО",
                         "она определена здесь здесь. Выберите другое имя.");
            return Err(())
        }

        if let Some(существующая_процедура) = self.процедуры.get(&имя.текст) {
            диагностика!(&имя.лок, "ОШИБКА",
                         "уже существует процедура с именем «{имя}»",
                         имя = имя.текст);
            диагностика!(&существующая_процедура.имя.лок, "ИНФО",
                         "она определена здесь здесь. Выберите другое имя.");
            return Err(())
        }

        if let Some(существующая_константа) = self.константы.get(&имя.текст) {
            диагностика!(&имя.лок, "ОШИБКА",
                         "уже существует константа с именем «{имя}»",
                         имя = имя.текст);
            диагностика!(&существующая_константа.имя.лок, "ИНФО",
                         "она определена здесь здесь. Выберите другое имя.");
            return Err(())
        }

        Ok(())
    }

    pub fn разобрать(лекс: &mut Лексер) -> Результат<Модуль> {
        let mut модуль = Модуль::default();
        loop {
            let ключ = лекс.вытащить_лексему_вида(&[
                ВидЛексемы::КлючПер,
                ВидЛексемы::КлючПро,
                ВидЛексемы::КлючКонст,
                ВидЛексемы::Конец,
            ])?;
            // СДЕЛАТЬ: проверка на коллизии между переменными, процедурами, константами, тд.
            match ключ.вид {
                ВидЛексемы::КлючПер => {
                    let переменная = Переменная::разобрать(лекс)?;
                    модуль.верифицировать_переопределение_имени(&переменная.имя)?;
                    модуль.переменные.insert(переменная.имя.текст.clone(), переменная);
                }
                ВидЛексемы::КлючПро => {
                    let процедура = Процедура::разобрать(лекс)?;
                    модуль.верифицировать_переопределение_имени(&процедура.имя)?;
                    модуль.процедуры.insert(процедура.имя.текст.clone(), процедура);
                }
                ВидЛексемы::КлючКонст => {
                    let константа = Константа::разобрать(лекс)?;
                    модуль.верифицировать_переопределение_имени(&константа.имя)?;
                    модуль.константы.insert(константа.имя.текст.clone(), константа);
                }
                ВидЛексемы::Конец => return Ok(модуль),
                _ => unreachable!(),
            }
        }
    }
}
