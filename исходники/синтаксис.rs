use std::num::{IntErrorKind};
use std::collections::HashMap;
use лексика::*;

#[derive(Debug)]
pub enum Тип {
    Цел
}

impl Тип {
    fn разобрать(лекс: &mut Лексер) -> Option<Тип> {
        let имя_типа = лекс.ожидать_виды(&[ВидЛексемы::Идент])?;
        match имя_типа.текст.as_str() {
            "цел" => Some(Тип::Цел),
            _ => {
                диагностика!(&имя_типа.лок, "ОШИБКА",
                             "неизвестный тип «{имя_типа}»",
                             имя_типа = &имя_типа.текст);
                None
            }
        }
    }
}

pub struct Переменная {
    pub имя: Лексема,
    pub тип: Тип,
}

impl Переменная {
    fn разобрать(лекс: &mut Лексер) -> Option<Переменная> {
        let имя = лекс.ожидать_виды(&[ВидЛексемы::Идент])?;
        let тип = Тип::разобрать(лекс)?;
        let _ = лекс.ожидать_виды(&[ВидЛексемы::ТочкаЗапятая])?;
        Some(Переменная{имя, тип})
    }
}

#[derive(Debug)]
pub enum Выражение {
    Число(usize),
    Строка(Лексема),
}

#[derive(Debug)]
pub enum Утверждение {
    Присваивание{имя: Лексема, значение: Выражение},
    Вызов{имя: Лексема, аргументы: Vec<Выражение>},
}

#[derive(Debug)]
pub struct Процедура {
    pub имя: Лексема,
    pub тело: Vec<Утверждение>
}

impl Процедура {
    fn новая(имя: Лексема) -> Процедура {
        Процедура {
            имя,
            тело: Vec::new(),
        }
    }

    fn разобрать(лекс: &mut Лексер) -> Option<Процедура> {
        let имя = лекс.ожидать_виды(&[ВидЛексемы::Идент])?;
        let _ = лекс.ожидать_виды(&[ВидЛексемы::ОткрытаяСкобка])?;
        let _ = лекс.ожидать_виды(&[ВидЛексемы::ЗакрытаяСкобка])?;
        let _ = лекс.ожидать_виды(&[ВидЛексемы::КлючНч])?;
        let mut процедура = Процедура::новая(имя);

        loop {
            let лексема = лекс.ожидать_виды(&[
                ВидЛексемы::Идент,
                ВидЛексемы::КлючКц,
            ])?;
            match лексема.вид {
                ВидЛексемы::Идент => {
                    let имя = лексема;
                    let лексема = лекс.ожидать_виды(&[
                        ВидЛексемы::Присваивание,
                        ВидЛексемы::ОткрытаяСкобка
                    ])?;
                    match лексема.вид {
                        ВидЛексемы::Присваивание => {
                            let значение = Выражение::разобрать(лекс)?;
                            let _ = лекс.ожидать_виды(&[ВидЛексемы::ТочкаЗапятая])?;
                            процедура.тело.push(Утверждение::Присваивание {
                                имя,
                                значение
                            });
                        }
                        ВидЛексемы::ОткрытаяСкобка => {
                            let аргумент = Выражение::разобрать(лекс)?;
                            let _ = лекс.ожидать_виды(&[ВидЛексемы::ЗакрытаяСкобка])?;
                            let _ = лекс.ожидать_виды(&[ВидЛексемы::ТочкаЗапятая])?;
                            процедура.тело.push(Утверждение::Вызов {
                                имя,
                                аргументы: vec![аргумент],
                            });
                        }
                        _ => unreachable!()
                    }
                }
                ВидЛексемы::КлючКц => break,
                _ => unreachable!(),
            }
        }
        Some(процедура)
    }
}

impl Выражение {
    fn разобрать(лекс: &mut Лексер) -> Option<Выражение> {
        let лексема = лекс.ожидать_виды(&[
            ВидЛексемы::Число,
            ВидЛексемы::Строка
        ])?;
        match лексема.вид {
            ВидЛексемы::Число => {
                match лексема.текст.parse() {
                    Ok(число) => Some(Выражение::Число(число)),
                    Err(ошибка) => match ошибка.kind() {
                        IntErrorKind::PosOverflow => {
                            диагностика!(&лексема.лок, "ОШИБКА", "Число слишком большое");
                            None
                        }
                        IntErrorKind::Empty => unreachable!(),
                        IntErrorKind::InvalidDigit => unreachable!(),
                        IntErrorKind::NegOverflow => unreachable!(),
                        IntErrorKind::Zero => unreachable!(),
                        _ => {
                            диагностика!(&лексема.лок, "ОШИБКА", "Число некорректно");
                            None
                        }
                    }
                }
            }
            ВидЛексемы::Строка => Some(Выражение::Строка(лексема)),
            _ => unreachable!(),
        }
    }
}

pub struct Константа {
    имя: Лексема,
    значение: Выражение,
}

impl Константа {
    fn разобрать(лекс: &mut Лексер) -> Option<Константа> {
        let имя = лекс.ожидать_виды(&[ВидЛексемы::Идент])?;
        let _ = лекс.ожидать_виды(&[ВидЛексемы::Равно])?;
        let значение = Выражение::разобрать(лекс)?;
        Some(Константа{имя, значение})
    }
}

#[derive(Default)]
pub struct Модуль {
    pub переменные: HashMap<String, Переменная>,
    pub процедуры: HashMap<String, Процедура>,
    pub константы: HashMap<String, Константа>,
}

impl Модуль {
    fn верифицировать_переопределение_имени(&self, имя: &Лексема) -> Option<()> {
        if let Some(существующая_переменная) = self.переменные.get(&имя.текст) {
            диагностика!(&имя.лок, "ОШИБКА",
                         "уже существует переменная с именем «{имя}»",
                         имя = имя.текст);
            диагностика!(&существующая_переменная.имя.лок, "ИНФО",
                         "она определена здесь здесь. Выберите другое имя.");
            return None
        }

        if let Some(существующая_процедура) = self.процедуры.get(&имя.текст) {
            диагностика!(&имя.лок, "ОШИБКА",
                         "уже существует процедура с именем «{имя}»",
                         имя = имя.текст);
            диагностика!(&существующая_процедура.имя.лок, "ИНФО",
                         "она определена здесь здесь. Выберите другое имя.");
            return None
        }

        if let Some(существующая_константа) = self.константы.get(&имя.текст) {
            диагностика!(&имя.лок, "ОШИБКА",
                         "уже существует константа с именем «{имя}»",
                         имя = имя.текст);
            диагностика!(&существующая_константа.имя.лок, "ИНФО",
                         "она определена здесь здесь. Выберите другое имя.");
            return None
        }

        Some(())
    }

    pub fn разобрать(лекс: &mut Лексер) -> Option<Модуль> {
        let mut модуль = Модуль::default();
        loop {
            let ключ = лекс.ожидать_виды(&[
                ВидЛексемы::КлючПер,
                ВидЛексемы::КлючПро,
                ВидЛексемы::КлючКонст,
                ВидЛексемы::Конец,
            ])?;
            // СДЕЛАТЬ: проверка на коллизии между переменными, процедурами, константами, тд.
            match ключ.вид {
                ВидЛексемы::КлючПер => {
                    let переменная = Переменная::разобрать(лекс)?;
                    модуль.верифицировать_переопределение_имени(&переменная.имя)?;
                    модуль.переменные.insert(переменная.имя.текст.clone(), переменная);
                }
                ВидЛексемы::КлючПро => {
                    let процедура = Процедура::разобрать(лекс)?;
                    модуль.верифицировать_переопределение_имени(&процедура.имя)?;
                    модуль.процедуры.insert(процедура.имя.текст.clone(), процедура);
                }
                ВидЛексемы::КлючКонст => {
                    let константа = Константа::разобрать(лекс)?;
                    модуль.верифицировать_переопределение_имени(&константа.имя)?;
                    модуль.константы.insert(константа.имя.текст.clone(), константа);
                    return None;
                }
                ВидЛексемы::Конец => return Some(модуль),
                _ => unreachable!(),
            }
        }
    }
}
